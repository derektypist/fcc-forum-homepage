{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["moment","require","Topic","props","url","id","className","index","href","target","topic","images","map","key","img_url","avatar_template","replace","username","src","alt","replies","views","activity","Header","App","state","users","topics","isFetching","findUser","find","user","a","fetch","response","json","data","this","setState","topic_list","Object","values","createdAt","Date","lastUpdated","last_posted_at","minutes","Math","floor","duration","diff","asMinutes","hours","asHours","posters","i","length","push","user_id","title","posts_count","class","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a18f6c73.chunk.js","sourcesContent":["import React, {Component} from 'react';\nlet moment = require('moment');\n\n// Function for Topic\nfunction Topic(props) {\n  let url=`https://www.freecodecamp.org/forum/t/${props.id}`;\n  let imgUrl = \"https://www.freecodecamp.org\";\n  let profile = \"https://www.freecodecamp.org/forum/u/\";\n  return(\n    <div className=\"topic\">\n      <div className=\"first\">\n        <div>\n          <span>{props.index}</span>\n          <span><a href={url} target=\"_blank\">{props.topic}</a></span>\n        </div>\n        <span>{props.images.map((index,key) => {\n          let img_url = index.avatar_template;\n          img_url = img_url.replace('{size}','24');\n          return <a key={key} href={profile + index.username} target=\"_blank\"><img src={imgUrl + img_url} alt=\"\"></img></a>\n        })}</span>\n      </div>\n      <div className=\"second\">\n        <span>{props.replies-1}</span>\n        <span>{props.views}</span>\n        <span>{props.activity}</span>\n      </div>\n    </div>\n  )\n}\n\n// Function for Header\nfunction Header() {\n  return(\n    <div className=\"header\">\n      <div>\n        <span>#</span>\n        <span>Topic</span>\n      </div>\n      <div>\n        <span>Replies</span>\n        <span>Views</span>\n        <span>Activity</span>\n      </div>\n    </div>\n  )\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n  }\n\n  state = {\n    users: [],\n    topics: [],\n    isFetching: false\n  }\n\n  findUser = (id) => {\n    return this.state.users.find(user => {\n      if (user.id===id) {\n        return user.avatar_template\n      }\n    })\n  }\n\n  async componentDidMount() {\n    const response = await fetch('https://forum-proxy.freecodecamp.rocks/latest')\n    const data = await response.json()\n    this.setState({\n      topics: data.topic_list.topics,\n      users: data.users,\n      isFetching: true\n    })\n  }\n\n  render() {\n    const {users, topics, isFetching} = this.state\n    let userId = Object.values(users)\n    return(\n      <div className=\"App\">\n        <h1>FreeCodeCamp Forum Home Page</h1>\n        <Header />\n        {isFetching ? topics.map((index,key) => {\n          let activity = ''\n          const createdAt = moment(new Date(),'DD/MM/YYYY')\n          const lastUpdated = moment(new Date(index.last_posted_at),'DD/MM/YYYY')\n          const minutes = Math.floor(moment.duration(createdAt.diff(lastUpdated)).asMinutes())\n          const hours = Math.floor(moment.duration(createdAt.diff(lastUpdated)).asHours())\n          const posters = index.posters\n          let images = []\n          for (let i=0; i < posters.length; i++) {\n            images.push(this.findUser(posters[i].user_id))\n          }\n\n          if (minutes > 59) {\n            activity = hours + \"h\"\n          } else {\n            activity = minutes + \"m\"\n          }\n\n          return <Topic index = {key+1} topic={index.title} key={key} replies={index.posts_count} views={index.views} activity={activity} id={index.id} images={images} />\n\n        }) : <div class=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>}\n      </div>\n    )\n  }\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}